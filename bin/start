#!/usr/bin/env php
<?php

date_default_timezone_set('Europe/Kiev');

if (!file_exists(dirname(__DIR__).'/madeline.php')) {
    copy('https://phar.madelineproto.xyz/madeline.php', dirname(__DIR__).'/madeline.php');
}

require_once dirname(__DIR__).'/madeline.php';
require_once dirname(__DIR__).'/vendor/autoload.php';

use App\DepthHelper;
use danog\MadelineProto\API;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Dotenv\Dotenv;

$dotenv = new Dotenv();
$dotenv->loadEnv(dirname(__DIR__).'/.env');

$input = new ArgvInput();
$output = new ConsoleOutput();
$io = new SymfonyStyle($input, $output);

$app_api_id = $_SERVER['APP_API_ID'];
$app_api_hash = $_SERVER['APP_API_HASH'];

if (empty($app_api_id)) {
    $io->error('APP_API_ID can\'t be empty');

    die();
}

if (empty($app_api_hash)) {
    $io->error('APP_API_HASH can\'t be empty');

    die();
}

$settings =  [
    'app_info' => [
        'api_id' => $app_api_id,
        'api_hash' => $app_api_hash,
    ],
    'logger' => [
        'logger' => 0,
    ],
];

$api = new API(dirname(__DIR__).'/var/session.madeline', $settings);

if (getopt(null, ['login'])) {
    $api->loop(function () use ($api, $io) {
        $phone = trim((string)  $io->ask('Enter phone: '));
        yield $api->phoneLogin($phone);

        $code = trim((string) $io->ask('Enter code: '));
        yield $api->completePhoneLogin($code);
    });
}

$api->loop(function () use ($api, $io) {
    if (! yield $api->getSelf()) {
        $io->warning('You arn\'t authenticated in telegram. Please, start script with --login flag');

        die();
    }
});

$depthHelper = new DepthHelper();
$depthHelper->setDepthInMinutes(1000);
$depth = $depthHelper->getDepth();

$channels = [
    'https://t.me/pwrtelegramgroupru'
];

$results_messages = [];
foreach ($channels as $channel) {

    $api->loop(function () use ($api, $channel, &$results_messages, $depth, &$count, $io) {

        $stop = false;

        do {

            try {
                $parsed_messages = yield $api->messages->getHistory([
                    'peer' => $channel,
                    'offset_id' => 0,
                    'offset_date' => 0,
                    'add_offset' => 0,
                    'limit' => 100,
                    'max_id' => 0,
                    'min_id' => 0,
                ])['messages'];
            } catch (Exception $e) {

                if ('You have not joined this chat' === $e->getMessage()) {
                    try {
                        $api->channels->joinChannel(['channel' => $channel]);

                        $parsed_messages = yield $api->messages->getHistory([
                            'peer' => $channel,
                            'offset_id' => 0,
                            'offset_date' => 0,
                            'add_offset' => 0,
                            'limit' => 100,
                            'max_id' => 0,
                            'min_id' => 0,
                        ])['messages'];
                    } catch (\Exception $e) {
                        $io->error($e->getMessage());

                        die();
                    }
                } else {
                    $io->error($e->getMessage());

                    die();
                }
            }

            foreach ($parsed_messages as $message) {

                if (!isset($message['message'])) {
                    continue;
                }

                if ($message['date'] < $depth) {
                    $stop = true;
                    break;
                }

                $results_message = [
                    'date' => date('Y-m-d H:i:s', $message['date']),
                    'message' => $message['message']
                ];

                if (isset($message['reply_to_msg_id'])) {

                    try {
                        $reply_to = yield $api->channels->getMessages([
                                'channel' => $channel,
                                'id' => [$message['reply_to_msg_id']]
                        ]);
                    } catch (Exception $e) {
                        $io->error($e->getMessage());
                        continue;
                    }

                    $results_message['reply_to'] = $reply_to['messages'][0]['message'];
                }

                $results_messages[] = $results_message;
            }

        } while (!$stop);
    });
}

$api->stop();

var_dump($results_messages);

$io->success('Messages successfully parsed!'.PHP_EOL.'Total messages count: '.count($results_messages));


